// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id Int @id @default(autoincrement())
  title String @db.VarChar(256)
  inputTime DateTime @default(now())
  user User[]
  lg_user lg_user[]
}

model User {
  id Int @id @default(autoincrement())
  username String
  email String @unique @db.VarChar(256)
  password String 
  roleId Int 
  inputUn String
  inputTime DateTime @default(now())

  role Role @relation(fields: [roleId], references: [id])
  
  profile Profile[]
  doctorProfile doctorProfile[]
}

model lg_user {
  id Int @id @default(autoincrement())

  username String
  email String
  password String
  roleId Int
  action String
  inputUn String

  created_at DateTime @default(now())
  role Role @relation(fields: [roleId], references: [id])
}

model Profile {
  id Int @id @default(autoincrement())

  name String
  age String
  address String
  marriedStatus Boolean
  handphone_number String
  sex String
  userId Int 

  created_at DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
}

model Specialist {
  id Int @id @default(autoincrement())
  name String @db.VarChar(256)
  inputTime DateTime @default(now())

  doctorProfile doctorProfile[]
}

model doctorProfile {
  id Int @id @default(autoincrement())

  name String
  age String
  address String
  hp String
  sex String
  userId Int
  location String
  SpecialistId Int
  isActive Boolean
  billPerHours Int

  user User @relation(fields: [userId], references: [id])
  specialist Specialist @relation(fields: [SpecialistId], references: [id])
}